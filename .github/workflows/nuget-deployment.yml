# This action executes on every push to master (usually as a result of a PR)
# to ensure the code base that is actually in master passes all expectations

name: Nuget Deployment
on: 
  workflow_dispatch:
    inputs: 
      version-number:
        description: "Version Number (e.g. 1.2.3)"
        required: true
        type: string
      version-suffix:
        description: "Version Suffix (e.g. 'beta')"
        required: false
        type: string
      
env: 
  DOTNET_CURRENT: 6.x
  DOTNET_LTS: 3.1.x
  SLN_PATH: ./src/bobs-fishing.sln  
  PRIMARY_LIB_PATH: ./src/bobs-fishing/bobs-fishing.csproj
  SUBSCRIPTIONS_LIB_PATH: ./src/bobs-fishing-extended/bobs-fishing-extended.csproj
  BUILD_CONFIG: Release
  OUTPUT_DIR: ./output
  NUGET_KEY: ${{ secrets.NUGET_KEY }}

jobs:
  deployment:
    name:  Pack & Deploy    
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v3
        name: Checkout Code
      
      - uses: actions/setup-dotnet@v2
        name: Install .NET (${{ env.DOTNET_LTS }})
        with:
          dotnet-version: ${{ env.DOTNET_LTS }}

      - uses: actions/setup-dotnet@v2
        name: Install .NET (${{ env.DOTNET_CURRENT }})
        with:
          dotnet-version: ${{ env.DOTNET_CURRENT }}

      - name: Configure Build
        run: ./build/configure-ci-build.ps1
        shell: pwsh
        
      - name: Nuget Restore
        run: dotnet restore ${{ env.SLN_PATH }}

      - name: Build Solution
        run: dotnet build ${{ env.SLN_PATH }} --configuration ${{ env.BUILD_CONFIG }} --no-restore --verbosity normal

      - name: Test Solution
        run: dotnet test ${{ env.SLN_PATH }} --configuration ${{ env.BUILD_CONFIG }}  --no-restore --no-build 

      - name: Pre-Package Inspection
        run: | 
          ./build/pre-package-checks.ps1 -versionNumber ${{inputs.version-number}} -versionSuffix ${{inputs.version-suffix}} -csProjFile "${{env.PRIMARY_LIB}}"
          ./build/pre-package-checks.ps1 -versionNumber ${{inputs.version-number}} -versionSuffix ${{inputs.version-suffix}} -csProjFile "${{env.SUBSCRIPTIONS_LIB_PATH}}"
        shell: pwsh

      - name: Package Contents
        run: |
          dotnet pack ${{ env.PRIMARY_LIB }} --configuration ${{ env.BUILD_CONFIG }} --no-restore --include-symbols --output ${{ env.OUTPUT_DIR }} /p:VersionPrefix=${{inputs.version-number}} /p:VersionSuffix="${{inputs.version-suffix}}"
          dotnet pack ${{ env.SUBSCRIPTIONS_LIB_PATH }} --configuration ${{ env.BUILD_CONFIG }} --no-restore --include-symbols --output ${{ env.OUTPUT_DIR }} /p:VersionPrefix=${{inputs.version-number}} /p:VersionSuffix=${{inputs.version-suffix}}
      
      - name: Post-Package Inspection 
        run: |
          ./build/post-package-checks.ps1 -versionNumber ${{inputs.version-number}} -versionSuffix ${{inputs.version-suffix}} -csProjFile "${{env.PRIMARY_LIB}}" -artifactDirectory ${{env.OUTPUT_DIR}}
          ./build/post-package-checks.ps1 -versionNumber ${{inputs.version-number}} -versionSuffix ${{inputs.version-suffix}} -csProjFile "${{env.SUBSCRIPTIONS_LIB_PATH}}" -artifactDirectory ${{env.OUTPUT_DIR}}
        shell: pwsh

      - name: Publish To Nuget 
        run: dotnet nuget push "${{env.OUTPUT_DIR}}/*.nupkg" --source 'https://api.nuget.org/v3/index.json' --api-key "${{env.NUGET_KEY}}"

      # - name: Post Package Inspection
      #   run: ./build/post-package-checks.ps1
      #   shell: pwsh


